/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables;


import edu.java.scrapper.domain.jooq.DefaultSchema;
import edu.java.scrapper.domain.jooq.Keys;
import edu.java.scrapper.domain.jooq.tables.records.TrackInfoRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TrackInfo extends TableImpl<TrackInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TRACK_INFO</code>
     */
    public static final TrackInfo TRACK_INFO = new TrackInfo();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<TrackInfoRecord> getRecordType() {
        return TrackInfoRecord.class;
    }

    /**
     * The column <code>TRACK_INFO.LINK_ID</code>.
     */
    public final TableField<TrackInfoRecord, Integer> LINK_ID = createField(DSL.name("LINK_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRACK_INFO.TG_CHAT</code>.
     */
    public final TableField<TrackInfoRecord, Integer> TG_CHAT = createField(DSL.name("TG_CHAT"), SQLDataType.INTEGER.nullable(false), this, "");

    private TrackInfo(Name alias, Table<TrackInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrackInfo(Name alias, Table<TrackInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TRACK_INFO</code> table reference
     */
    public TrackInfo(String alias) {
        this(DSL.name(alias), TRACK_INFO);
    }

    /**
     * Create an aliased <code>TRACK_INFO</code> table reference
     */
    public TrackInfo(Name alias) {
        this(alias, TRACK_INFO);
    }

    /**
     * Create a <code>TRACK_INFO</code> table reference
     */
    public TrackInfo() {
        this(DSL.name("TRACK_INFO"), null);
    }

    public <O extends Record> TrackInfo(Table<O> child, ForeignKey<O, TrackInfoRecord> key) {
        super(child, key, TRACK_INFO);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<TrackInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_63C;
    }

    @Override
    @NotNull
    public List<ForeignKey<TrackInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_6, Keys.CONSTRAINT_63);
    }

    private transient Link _link;
    private transient TgChat _tgChat;

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public Link link() {
        if (_link == null)
            _link = new Link(this, Keys.CONSTRAINT_6);

        return _link;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.TG_CHAT</code> table.
     */
    public TgChat tgChat() {
        if (_tgChat == null)
            _tgChat = new TgChat(this, Keys.CONSTRAINT_63);

        return _tgChat;
    }

    @Override
    @NotNull
    public TrackInfo as(String alias) {
        return new TrackInfo(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public TrackInfo as(Name alias) {
        return new TrackInfo(alias, this);
    }

    @Override
    @NotNull
    public TrackInfo as(Table<?> alias) {
        return new TrackInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TrackInfo rename(String name) {
        return new TrackInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TrackInfo rename(Name name) {
        return new TrackInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TrackInfo rename(Table<?> name) {
        return new TrackInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
